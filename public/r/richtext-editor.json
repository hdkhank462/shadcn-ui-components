{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "richtext-editor",
  "type": "registry:component",
  "title": "Richtext Editor",
  "description": "A customizable rich text editor component using TipTap and shadcn/ui.",
  "dependencies": [
    "@tiptap/react",
    "@tiptap/starter-kit",
    "@tiptap/extension-text-align",
    "lucide-react",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "src/registry/default/components/richtext-editor.tsx",
      "content": "\"use client\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Toggle, toggleVariants } from \"@/components/ui/toggle\";\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/components/ui/tooltip\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport TextAlign from \"@tiptap/extension-text-align\";\r\nimport {\r\n  EditorContent,\r\n  useEditor,\r\n  UseEditorOptions,\r\n  type Editor,\r\n} from \"@tiptap/react\";\r\nimport StarterKit from \"@tiptap/starter-kit\";\r\nimport { VariantProps } from \"class-variance-authority\";\r\nimport {\r\n  AlignCenter,\r\n  AlignLeft,\r\n  AlignRight,\r\n  Bold,\r\n  Heading1,\r\n  Heading2,\r\n  Heading3,\r\n  Italic,\r\n  List,\r\n  ListOrdered,\r\n  Redo,\r\n  Strikethrough,\r\n  Undo,\r\n} from \"lucide-react\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface RichtextEditorProps {\r\n  options?: UseEditorOptions;\r\n  className?: string;\r\n}\r\n\r\nconst RichtextEditor = ({ options, className }: RichtextEditorProps) => {\r\n  const editor = useEditor({\r\n    extensions: [\r\n      StarterKit,\r\n      TextAlign.configure({ types: [\"heading\", \"paragraph\"] }),\r\n    ],\r\n    immediatelyRender: false,\r\n    editorProps: {\r\n      attributes: {\r\n        class:\r\n          \"min-h-[300px] p-2 focus:outline-none prose prose-sm sm:prose lg:prose-lg xl:prose-xl dark:prose-invert !w-full !max-w-none\",\r\n      },\r\n    },\r\n    content: \"<p>Hello World! üåéÔ∏è</p>\",\r\n    ...options,\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"w-full border border-input rounded-lg overflow-hidden dark:bg-input/30\",\r\n        className\r\n      )}\r\n    >\r\n      <MenuBar editor={editor} />\r\n      <EditorContent editor={editor} />\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface MenuBarProps {\r\n  editor: Editor | null;\r\n}\r\n\r\nconst MenuBar = ({ editor }: MenuBarProps) => {\r\n  if (!editor) return null;\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap items-center gap-1 p-2 border border-t-0 rounded-t-lg border-x-0 border-input bg-card\">\r\n      <TooltipProvider>\r\n        <div className=\"flex flex-wrap gap-1\">\r\n          <MenuBarButton\r\n            name=\"Bold\"\r\n            icon={<Bold />}\r\n            isActive={editor.isActive(\"bold\")}\r\n            onChange={() => editor.chain().focus().toggleBold().run()}\r\n          />\r\n          <MenuBarButton\r\n            name=\"Italic\"\r\n            icon={<Italic />}\r\n            isActive={editor.isActive(\"italic\")}\r\n            onChange={() => editor.chain().focus().toggleItalic().run()}\r\n          />\r\n          <MenuBarButton\r\n            name=\"Strike\"\r\n            icon={<Strikethrough />}\r\n            isActive={editor.isActive(\"strike\")}\r\n            onChange={() => editor.chain().focus().toggleStrike().run()}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"w-px h-6 mx-2 bg-border\" />\r\n\r\n        <div className=\"flex flex-wrap gap-1\">\r\n          <MenuBarButton\r\n            name=\"Heading 1\"\r\n            icon={<Heading1 />}\r\n            isActive={editor.isActive(\"heading\", { level: 1 })}\r\n            onChange={() =>\r\n              editor.chain().focus().toggleHeading({ level: 1 }).run()\r\n            }\r\n          />\r\n          <MenuBarButton\r\n            name=\"Heading 2\"\r\n            icon={<Heading2 />}\r\n            isActive={editor.isActive(\"heading\", { level: 2 })}\r\n            onChange={() =>\r\n              editor.chain().focus().toggleHeading({ level: 2 }).run()\r\n            }\r\n          />\r\n          <MenuBarButton\r\n            name=\"Heading 3\"\r\n            icon={<Heading3 />}\r\n            isActive={editor.isActive(\"heading\", { level: 3 })}\r\n            onChange={() =>\r\n              editor.chain().focus().toggleHeading({ level: 3 }).run()\r\n            }\r\n          />\r\n          <MenuBarButton\r\n            name=\"Bullet List\"\r\n            icon={<List />}\r\n            isActive={editor.isActive(\"bulletList\")}\r\n            onChange={() => editor.chain().focus().toggleBulletList().run()}\r\n          />\r\n          <MenuBarButton\r\n            name=\"Ordered List\"\r\n            icon={<ListOrdered />}\r\n            isActive={editor.isActive(\"orderedList\")}\r\n            onChange={() => editor.chain().focus().toggleOrderedList().run()}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"w-px h-6 mx-2 bg-border\" />\r\n\r\n        <div className=\"flex flex-wrap gap-1\">\r\n          <MenuBarButton\r\n            name=\"Align Left\"\r\n            icon={<AlignLeft />}\r\n            isActive={editor.isActive({ textAlign: \"left\" })}\r\n            onChange={() => editor.chain().focus().setTextAlign(\"left\").run()}\r\n          />\r\n          <MenuBarButton\r\n            name=\"Align Center\"\r\n            icon={<AlignCenter />}\r\n            isActive={editor.isActive({ textAlign: \"center\" })}\r\n            onChange={() => editor.chain().focus().setTextAlign(\"center\").run()}\r\n          />\r\n          <MenuBarButton\r\n            name=\"Align Right\"\r\n            icon={<AlignRight />}\r\n            isActive={editor.isActive({ textAlign: \"right\" })}\r\n            onChange={() => editor.chain().focus().setTextAlign(\"right\").run()}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"w-px h-6 mx-2 bg-border\" />\r\n\r\n        <div className=\"flex flex-wrap gap-1\">\r\n          <MenuBarButton\r\n            name=\"Undo\"\r\n            type=\"button\"\r\n            icon={<Undo />}\r\n            onChange={() => editor.chain().focus().undo().run()}\r\n            disabled={!editor.can().undo()}\r\n          />\r\n          <MenuBarButton\r\n            name=\"Redo\"\r\n            type=\"button\"\r\n            icon={<Redo />}\r\n            onChange={() => editor.chain().focus().redo().run()}\r\n            disabled={!editor.can().redo()}\r\n          />\r\n        </div>\r\n      </TooltipProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype MenuBarToggleButtonProps = VariantProps<typeof toggleVariants> & {\r\n  name: string;\r\n  icon: ReactNode;\r\n  onChange: () => void;\r\n  type?: \"button\" | \"toggle\";\r\n  isActive?: boolean;\r\n  disabled?: boolean;\r\n};\r\n\r\nconst MenuBarButton = ({\r\n  type = \"toggle\",\r\n  size = \"sm\",\r\n  name,\r\n  icon,\r\n  isActive,\r\n  disabled,\r\n  onChange,\r\n}: MenuBarToggleButtonProps) => {\r\n  return (\r\n    <Tooltip>\r\n      <TooltipTrigger asChild>\r\n        {type == \"toggle\" ? (\r\n          <Toggle\r\n            size={size}\r\n            pressed={isActive}\r\n            onPressedChange={onChange}\r\n            className={cn(isActive && \"bg-muted text-muted-foreground\")}\r\n          >\r\n            {icon}\r\n          </Toggle>\r\n        ) : (\r\n          <Button\r\n            size={size}\r\n            variant={\"ghost\"}\r\n            type=\"button\"\r\n            onClick={onChange}\r\n            disabled={disabled}\r\n          >\r\n            {icon}\r\n          </Button>\r\n        )}\r\n      </TooltipTrigger>\r\n      <TooltipContent>\r\n        <p>{name}</p>\r\n      </TooltipContent>\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default RichtextEditor;\r\n",
      "type": "registry:component"
    }
  ]
}